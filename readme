React Learning Roadmap with Practical
Experience
1. Prerequisites (Before React)
Learn:
● HTML basics (tags, attributes, semantic HTML)
● CSS basics (selectors, box model, flexbox, grid)
● JavaScript fundamentals:
○ Variables, data types, operators
○ Functions, arrays, objects
○ DOM manipulation
○ map, filter, reduce
○ ES6+ features (arrow functions, destructuring, spread/rest, template literals)
Practical:
● Build a static portfolio page with HTML/CSS/JS.
● Create a simple "To-Do List" app in vanilla JavaScript.
---------------------------------------------------------------------------------------
📌 1. React Basics
✅ What is React?
React is a JavaScript library for building user interfaces.

It allows building Single Page Applications (SPA) – meaning the page doesn’t reload for every navigation. Instead, React dynamically updates parts of the page using Virtual DOM.

This makes apps faster and smoother.
--------------------------------------------------------
✅ 2.React Setup
Vite (modern, faster – recommended)

npm create vite@latest my-app
cd my-app
npm install
npm run dev
--------------------------------------------------------------
✅3. JSX Syntax

JSX lets you write HTML inside JavaScript.
-------------------------------------------------------------------

✅ 4.Components (Function Components)

A React component is a function that returns UI.
----------------------------------------------------------------------

✅5.Props

Props (short for properties) allow passing data from parent → child.
-------------------------------------------------------------------
✅ 6.State (useState)

State allows a component to remember values and re-render when they change.
----------------------------------------------------------------------
✅7. Event Handling

In React, events use camelCase (e.g., onClick).

ex:<button onClick={() => alert("Clicked!")}>Click Me</button>

-------------------------------------------------------------------------------
✅ 8.Conditional Rendering

Render content based on conditions.
{isLoggedIn ? <p>Welcome back!</p> : <p>Please login</p>}
--------------------------------------------------------------------------------------
✅ 9.Lists & Keys

Render arrays using .map() and give each element a unique key.
-------------------------------------------------------------------------
✅ 2. Practical Projects

🟢 1.(A) Counter App
🟢 2.(B) User Card List
🟢 3.(C) Toggle Light/Dark Mode
✅ With these 3 projects, you covered:
useState,Props,Conditional rendering,Lists & Keys,Event handling.
✅ 4.EventHandling
With these, you now understand event handling in React:
onClick (button clicks),onChange (inputs),onSubmit (forms),Passing parameters
-------------------------------------------------------------------------------
✅ 5.Styling in React
🔹 1. CSS Modules
CSS Modules scope styles locally to a component.
File name must end with .module.css.

🔹 2. Inline Styles
Use a JavaScript object to define styles.

🔹 3. Styled-components (CSS in JS)
cmd : npm install styled-components

🔹 4. Tailwind CSS (Utility-first CSS framework)
Tailwind gives you ready-made CSS utility classes (like bg-blue-500, p-4, text-center) so you don’t write custom CSS much.
Instead of creating CSS files, you apply these classes directly to your JSX elements.

npm install -D tailwindcss postcss autoprefixer
tailwindcss → the framework
postcss → processes Tailwind styles
autoprefixer → adds browser-specific CSS rules automatically

------------------------------------------------------------------------------
📌 6.React Hooks (Core) – Simple Definitions
✅1. useState
Lets you add state variables inside functional components.
Example: storing a counter value, input text.
✅2. useEffect
Runs side effects after render.
Example: timers, fetching data, subscriptions.
✅ 3.useRef
Stores a mutable reference that doesn’t re-render the component.
Example: accessing a DOM element or saving a previous value.
✅4.useReducer
Alternative to useState for complex state logic.
Uses a reducer function (state, action) → new state.
Example: form validation, counters with multiple actions.
✅ 5.useContext
Provides a way to share global data between components without passing props manually.
Example: theme, user authentication.

📌 Practical Tasks
Countdown Timer → uses useEffect to decrease time every second.
Theme Switcher → uses useContext to toggle between Light/Dark mode.
Form with Validation → uses useReducer to manage input values and errors.
----------------------------------------------------------------------------------------------------
